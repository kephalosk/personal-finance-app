name: versioning, unit tests, build, image scan, code scan, linting, ui tests and deploy

on:
  push:
    branches: 
      - 'master'

permissions:
  security-events: write
  checks: write

jobs:
  frontend-versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Build Tag
        id: build_tag
        run: |
          COMMIT_DATE=$(git show -s --format=%ct $GITHUB_SHA)
          DATE_TAG=$(date -d "@$COMMIT_DATE" +%Y%m%d_%H%M%S)
          SHORT_SHA=${GITHUB_SHA:0:7}
          BUILD_TAG="${DATE_TAG}_${SHORT_SHA}_$(date +%Y%m%d_%H%M%S)"
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV

      - name: Set Version Tag
        id: version_tag
        run: |
          VERSION_TAG=$(jq -r '(.version | split(".") | del(.[2]) | join("."))' frontend/package.json)
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Save Package Version
        run: |
          echo "${{ env.VERSION_TAG }}.${{ env.BUILD_TAG }}" > PACKAGE_VERSION_FRONTEND
        shell: bash

      - name: Upload Package Version as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: PACKAGE_VERSION_FRONTEND
          retention-days: 7


  backend-versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Build Tag
        id: build_tag
        run: |
          COMMIT_DATE=$(git show -s --format=%ct $GITHUB_SHA)
          DATE_TAG=$(date -d "@$COMMIT_DATE" +%Y%m%d_%H%M%S)
          SHORT_SHA=${GITHUB_SHA:0:7}
          BUILD_TAG="${DATE_TAG}_${SHORT_SHA}_$(date +%Y%m%d_%H%M%S)"
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV

      - name: Set Version Tag
        id: version_tag
        run: |
          VERSION_TAG=$(jq -r '(.version | split(".") | del(.[2]) | join("."))' backend/package.json)
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Save Package Version
        run: |
          echo "${{ env.VERSION_TAG }}.${{ env.BUILD_TAG }}" > PACKAGE_VERSION_BACKEND
        shell: bash

      - name: Upload Package Version as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PACKAGE_VERSION_BACKEND
          path: PACKAGE_VERSION_BACKEND
          retention-days: 7

  frontend-unit-tests:
    runs-on: ubuntu-latest

    needs: frontend-versioning

    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          cd frontend
          npm install

      - name: Run Frontend Unit Tests
        run: |
          cd frontend
          npm run test

  backend-unit-tests:
    runs-on: ubuntu-latest

    needs: backend-versioning

    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          cd backend
          npm install

      - name: Run Backend Unit Tests
        run: |
          cd backend
          npm run test

  backend-e2e-tests:
    runs-on: ubuntu-latest

    needs: backend-versioning

    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          cd backend
          npm install

      - name: install curl
        run: sudo apt update && sudo apt install curl

      - name: Get Runner IP
        run: |
          export RUNNER_IP=$(curl -4 -s ifconfig.me)
          echo "RUNNER_IP=$RUNNER_IP" >> $GITHUB_ENV
          echo "Runner IP: $RUNNER_IP"

      - name: Get existing firewall rules from DigitalOcean
        id: get_firewall
        run: |
          RESPONSE=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
            https://api.digitalocean.com/v2/databases/6652f7a3-beaa-416a-8bbd-e44c084b121d/firewall)
          echo "RESPONSE=$RESPONSE" >> $GITHUB_ENV

      - name: Add new IP to firewall rules
        id: add_rule
        run: |
          # Parse existing rules from the response
          EXISTING_RULES=$(echo $RESPONSE | jq '.rules')
          
          # Create new rule
          NEW_RULE=$(jq -n --arg ip "${{ env.RUNNER_IP }}" '{"type": "ip_addr", "value": $ip, "database": "all"}')

          # Combine existing rules and the new rule
          UPDATED_RULES=$(echo $EXISTING_RULES | jq ". + [${NEW_RULE}]")

          # Update firewall with the new rules
          curl -X PUT \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"rules": '"${UPDATED_RULES}"'}' \
            https://api.digitalocean.com/v2/databases/6652f7a3-beaa-416a-8bbd-e44c084b121d/firewall
        env:
          RUNNER_IP: ${{ env.RUNNER_IP }}

      - name: Run Backend E2E Tests
        env:
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        run: |
          cd backend
          npm run test:e2e

      - name: Get existing firewall rules from DigitalOcean
        id: get_firewall_after
        run: |
          NEWRESPONSE=$(curl -s -X GET \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
            https://api.digitalocean.com/v2/databases/6652f7a3-beaa-416a-8bbd-e44c084b121d/firewall)
          echo "NEWRESPONSE=$NEWRESPONSE" >> $GITHUB_ENV

      - name: Remove Runner IP from firewall rules
        id: remove_rule
        run: |
          # Parse existing rules from the response
          EXISTING_RULES=$(echo $NEWRESPONSE | jq '.rules')
          
          # Filter out the rule with the Runner IP
          UPDATED_RULES=$(echo $EXISTING_RULES | jq 'map(select(.value != "${{ env.RUNNER_IP }}"))')

          # Update firewall with the new rules
          curl -X PUT \
            -H "Authorization: Bearer ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"rules": '"${UPDATED_RULES}"'}' \
            https://api.digitalocean.com/v2/databases/6652f7a3-beaa-416a-8bbd-e44c084b121d/firewall
        env:
          RUNNER_IP: ${{ env.RUNNER_IP }}

  frontend-build:
    runs-on: ubuntu-latest

    needs: frontend-unit-tests

    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .

      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Build container image
        run: docker build --no-cache -t registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }} -f deployment/frontend.Dockerfile .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Push image to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

  backend-build:
    runs-on: ubuntu-latest

    needs:
      - backend-unit-tests
      - backend-e2e-tests

    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Download PACKAGE_VERSION_BACKEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_BACKEND
          path: .

      - name: Read PACKAGE_VERSION_BACKEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_BACKEND=$(cat PACKAGE_VERSION_BACKEND)
          echo "PACKAGE_VERSION_BACKEND=$PACKAGE_VERSION_BACKEND" >> $GITHUB_ENV

      - name: Build container image
        run: docker build --no-cache -t registry.digitalocean.com/kephalosk/nestjs-backend:${{ env.PACKAGE_VERSION_BACKEND }} -f deployment/backend.Dockerfile .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Push image to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/kephalosk/nestjs-backend:${{ env.PACKAGE_VERSION_BACKEND }}

  frontend-trivy-scan:
    runs-on: ubuntu-latest

    needs: frontend-build

    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .

      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Set up Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -

      - name: Set TRIVY_DBREPO to avoid rate limiting
        run: echo "TRIVY_DBREPO=ghcr.io/aquasecurity/trivy-db" >> $GITHUB_ENV

      - name: Scan Frontend Docker Image
        run: ./bin/trivy image --exit-code 1 --severity HIGH,CRITICAL registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

  frontend-grype-scan:
    runs-on: ubuntu-latest

    needs: frontend-build

    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .

      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Scan image with Grype
        uses: anchore/scan-action@v6
        continue-on-error: true
        id: grype_scan
        with:
          image: "registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}"
          output-format: table
          output-file: GRYPE_SCAN_FRONTEND.txt

      - name: Upload results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GRYPE_SCAN_FRONTEND
          path: GRYPE_SCAN_FRONTEND.txt
          retention-days: 7

      - name: Fail if Grype Scan Failed
        if: steps.grype_scan.outcome == 'failure'
        run: exit 1

  backend-trivy-scan:
    runs-on: ubuntu-latest

    needs: backend-build

    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_BACKEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_BACKEND
          path: .

      - name: Read PACKAGE_VERSION_BACKEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_BACKEND=$(cat PACKAGE_VERSION_BACKEND)
          echo "PACKAGE_VERSION_BACKEND=$PACKAGE_VERSION_BACKEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/nestjs-backend:${{ env.PACKAGE_VERSION_BACKEND }}

      - name: Set up Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -

      - name: Set TRIVY_DBREPO to avoid rate limiting
        run: echo "TRIVY_DBREPO=ghcr.io/aquasecurity/trivy-db" >> $GITHUB_ENV

      - name: Scan Backend Docker Image
        run: ./bin/trivy image --exit-code 1 --severity HIGH,CRITICAL registry.digitalocean.com/kephalosk/nestjs-backend:${{ env.PACKAGE_VERSION_BACKEND }}

  backend-grype-scan:
    runs-on: ubuntu-latest

    needs: backend-build

    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_BACKEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_BACKEND
          path: .

      - name: Read PACKAGE_VERSION_BACKEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_BACKEND=$(cat PACKAGE_VERSION_BACKEND)
          echo "PACKAGE_VERSION_BACKEND=$PACKAGE_VERSION_BACKEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/nestjs-backend:${{ env.PACKAGE_VERSION_BACKEND }}

      - name: Scan image with Grype
        uses: anchore/scan-action@v6
        continue-on-error: true
        id: grype_scan
        with:
          image: "registry.digitalocean.com/kephalosk/nestjs-backend:${{ env.PACKAGE_VERSION_BACKEND }}"
          output-format: table
          output-file: GRYPE_SCAN_BACKEND.txt

      - name: Upload results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GRYPE_SCAN_FRONTEND
          path: GRYPE_SCAN_FRONTEND.txt
          retention-days: 7

      - name: Fail if Grype Scan Failed
        if: steps.grype_scan.outcome == 'failure'
        run: exit 1

  codeql-scan:
    runs-on: ubuntu-latest

    needs: [backend-trivy-scan, backend-grype-scan, frontend-trivy-scan, frontend-grype-scan]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript,typescript'
          build-mode: 'none'

      - name: Finalize CodeQL Database and Upload Results
        uses: github/codeql-action/analyze@v3
        with:
          output: './results'
          upload: 'always'
          upload-database: 'true'
          wait-for-processing: 'true'

  gitleaks-scan:
    runs-on: ubuntu-latest

    needs: [backend-trivy-scan, backend-grype-scan, frontend-trivy-scan, frontend-grype-scan]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  eslint-scan:
    runs-on: ubuntu-latest

    needs: [codeql-scan, gitleaks-scan]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      - name: Run ESLint
        run: |
          cd frontend
          npx eslint .

      - name: Install Backend Dependencies
        run: |
          cd backend
          npm install

      - name: Run ESLint
        run: |
          cd backend
          npx eslint .

  frontend-e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    needs: eslint-scan

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright Browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .

      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run image from registry
        run: docker run -d -p 5173:80 registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run Playwright tests
        run: |
          cd frontend
          npx playwright test ui-tests/e2e-tests

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/ui-tests/e2e-tests
          retention-days: 30

  frontend-gui-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    needs: eslint-scan

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright Browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .

      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run image from registry
        run: docker run -d -p 5173:80 registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run Playwright tests
        run: |
          cd frontend
          npx playwright test ui-tests/gui-tests

      - name: Create Artifact for Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-integration
          path: frontend/ui-tests/gui-tests
          retention-days: 30

  create-new-vrts:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    needs: frontend-gui-tests
    if: needs.frontend-gui-tests.result == 'failure'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright Browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .

      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run image from registry
        run: docker run -d -p 5173:80 registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run Playwright tests
        run: |
          cd frontend
          npx playwright test ui-tests/gui-tests --update-snapshots

      - name: Create Artifact for new vrt screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: new-vrts
          path: frontend/ui-tests/gui-tests
          retention-days: 30
          
  frontend-deploy:
    runs-on: ubuntu-latest
    
    needs: [frontend-e2e-tests, frontend-gui-tests]

    steps:
      - name: Checkout master
        uses: actions/checkout@v4
  
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200
  
      - name: Renew cluster’s certificate
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.CLUSTER_ID }}

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .
  
      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Deploy to DigitalOcean Kubernetes
        run: |
          helm upgrade personal-finance-app ./deployment/helm/personal-finance-app --namespace default --set serviceVersion=${{ env.PACKAGE_VERSION_FRONTEND }} --wait

      - name: restart Pods
        run: kubectl -n default rollout restart deploy
  
      - name: Verify deployment
        run: kubectl rollout status deployment/personal-finance-app

      - name: Set CURRENT_PROD_FRONTEND_SERVICE_VERSION in GitHub Repository Variables
        run: |
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.VARIABLE_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d '{"name": "CURRENT_PROD_FRONTEND_SERVICE_VERSION", "value": "${{ env.PACKAGE_VERSION_FRONTEND }}"}' \
            https://api.github.com/repos/${{ github.repository }}/actions/variables/CURRENT_PROD_FRONTEND_SERVICE_VERSION

  backend-deploy:
    runs-on: ubuntu-latest

    needs: [frontend-e2e-tests, frontend-gui-tests]

    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Renew cluster’s certificate
        run: doctl kubernetes cluster kubeconfig save ${{ secrets.CLUSTER_ID }}

      - name: Download PACKAGE_VERSION_BACKEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_BACKEND
          path: .

      - name: Read PACKAGE_VERSION_BACKEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_BACKEND=$(cat PACKAGE_VERSION_BACKEND)
          echo "PACKAGE_VERSION_BACKEND=$PACKAGE_VERSION_BACKEND" >> $GITHUB_ENV

      - name: Deploy to DigitalOcean Kubernetes
        run: |
          helm upgrade nestjs-backend ./deployment/helm/nestjs-backend --namespace default --set serviceVersion=${{ env.PACKAGE_VERSION_BACKEND }} --wait

      - name: restart Pods
        run: kubectl -n default rollout restart deploy

      - name: Verify deployment
        run: kubectl rollout status deployment/nestjs-backend

      - name: Set CURRENT_PROD_BACKEND_SERVICE_VERSION in GitHub Repository Variables
        run: |
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.VARIABLE_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d '{"name": "CURRENT_PROD_BACKEND_SERVICE_VERSION", "value": "${{ env.PACKAGE_VERSION_BACKEND }}"}' \
            https://api.github.com/repos/${{ github.repository }}/actions/variables/CURRENT_PROD_BACKEND_SERVICE_VERSION
