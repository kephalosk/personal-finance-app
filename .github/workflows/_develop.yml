name: versioning, tests, build, image-scans, code-scans, linting and ui-tests

on:
  push:
    branches:
      - 'develop'

permissions:
  security-events: write
  checks: write

jobs:
  versioning:
    uses: ./.github/workflows/versioning.yml

  tests:
    uses: ./.github/workflows/tests.yml
    needs: versioning
    secrets: inherit

  build:
    uses: ./.github/workflows/build.yml
    needs: tests
    secrets: inherit

  frontend-trivy-scan:
    runs-on: ubuntu-latest

    needs: build

    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .

      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Set up Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -

      - name: Set TRIVY_DBREPO to avoid rate limiting
        run: echo "TRIVY_DBREPO=ghcr.io/aquasecurity/trivy-db" >> $GITHUB_ENV

      - name: Scan Frontend Docker Image
        run: ./bin/trivy image --exit-code 1 --severity HIGH,CRITICAL registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

  frontend-grype-scan:
    runs-on: ubuntu-latest

    needs: build

    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .

      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Scan image with Grype
        uses: anchore/scan-action@v6
        continue-on-error: true
        id: grype_scan
        with:
          image: "registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}"
          output-format: table
          output-file: GRYPE_SCAN_FRONTEND.txt

      - name: Upload results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GRYPE_SCAN_FRONTEND
          path: GRYPE_SCAN_FRONTEND.txt
          retention-days: 7

      - name: Fail if Grype Scan Failed
        if: steps.grype_scan.outcome == 'failure'
        run: exit 1

  backend-trivy-scan:
    runs-on: ubuntu-latest

    needs: build

    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_BACKEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_BACKEND
          path: .

      - name: Read PACKAGE_VERSION_BACKEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_BACKEND=$(cat PACKAGE_VERSION_BACKEND)
          echo "PACKAGE_VERSION_BACKEND=$PACKAGE_VERSION_BACKEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/nestjs-backend:${{ env.PACKAGE_VERSION_BACKEND }}

      - name: Set up Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -

      - name: Set TRIVY_DBREPO to avoid rate limiting
        run: echo "TRIVY_DBREPO=ghcr.io/aquasecurity/trivy-db" >> $GITHUB_ENV

      - name: Scan Backend Docker Image
        run: ./bin/trivy image --exit-code 1 --severity HIGH,CRITICAL registry.digitalocean.com/kephalosk/nestjs-backend:${{ env.PACKAGE_VERSION_BACKEND }}

  backend-grype-scan:
    runs-on: ubuntu-latest

    needs: build

    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_BACKEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_BACKEND
          path: .

      - name: Read PACKAGE_VERSION_BACKEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_BACKEND=$(cat PACKAGE_VERSION_BACKEND)
          echo "PACKAGE_VERSION_BACKEND=$PACKAGE_VERSION_BACKEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/nestjs-backend:${{ env.PACKAGE_VERSION_BACKEND }}

      - name: Scan image with Grype
        uses: anchore/scan-action@v6
        continue-on-error: true
        id: grype_scan
        with:
          image: "registry.digitalocean.com/kephalosk/nestjs-backend:${{ env.PACKAGE_VERSION_BACKEND }}"
          output-format: table
          output-file: GRYPE_SCAN_BACKEND.txt

      - name: Upload results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GRYPE_SCAN_BACKEND
          path: GRYPE_SCAN_BACKEND.txt
          retention-days: 7

      - name: Fail if Grype Scan Failed
        if: steps.grype_scan.outcome == 'failure'
        run: exit 1

  codeql-scan:
    runs-on: ubuntu-latest

    needs: [backend-trivy-scan, backend-grype-scan, frontend-trivy-scan, frontend-grype-scan]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript,typescript'
          build-mode: 'none'

      - name: Finalize CodeQL Database and Upload Results
        uses: github/codeql-action/analyze@v3
        with:
          output: './results'
          upload: 'always'
          upload-database: 'true'
          wait-for-processing: 'true'

  gitleaks-scan:
    runs-on: ubuntu-latest

    needs: [backend-trivy-scan, backend-grype-scan, frontend-trivy-scan, frontend-grype-scan]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  frontend-eslint-scan:
    runs-on: ubuntu-latest

    needs: [codeql-scan, gitleaks-scan]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      - name: Run ESLint
        run: |
          cd frontend
          npx eslint .

  backend-eslint-scan:
    runs-on: ubuntu-latest

    needs: [codeql-scan, gitleaks-scan]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Backend Dependencies
        run: |
          cd backend
          npm install

      - name: Run ESLint
        run: |
          cd backend
          npx eslint src

  frontend-e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    needs: frontend-eslint-scan

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: |
         cd frontend
         npm ci

      - name: Install Playwright Browsers
        run: |
         cd frontend
         npx playwright install --with-deps

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .

      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run image from registry
        run: docker run -d -p 5173:80 registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run Playwright tests
        run: |
         cd frontend
         npx playwright test ui-tests/e2e-tests

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/ui-tests/e2e-tests
          retention-days: 30

  frontend-gui-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    needs: frontend-eslint-scan

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright Browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .

      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run image from registry
        run: docker run -d -p 5173:80 registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run Playwright tests
        run: |
          cd frontend
          npx playwright test ui-tests/gui-tests

      - name: Create Artifact for Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-integration
          path: frontend/ui-tests/gui-tests
          retention-days: 30

  create-new-vrts:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    needs: frontend-gui-tests
    if: needs.frontend-gui-tests.result == 'failure'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright Browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION_FRONTEND Artifact
        uses: actions/download-artifact@v4
        with:
          name: PACKAGE_VERSION_FRONTEND
          path: .

      - name: Read PACKAGE_VERSION_FRONTEND
        id: read_package_version
        run: |
          PACKAGE_VERSION_FRONTEND=$(cat PACKAGE_VERSION_FRONTEND)
          echo "PACKAGE_VERSION_FRONTEND=$PACKAGE_VERSION_FRONTEND" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run image from registry
        run: docker run -d -p 5173:80 registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION_FRONTEND }}

      - name: Run Playwright tests
        run: |
          cd frontend
          npx playwright test ui-tests/gui-tests --update-snapshots

      - name: Create Artifact for new vrt screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: new-vrts
          path: frontend/ui-tests/gui-tests
          retention-days: 30

  send-notification:
    runs-on: ubuntu-latest

#    needs:
#      - frontend-gui-tests
#      - frontend-e2e-tests
#    if: needs.frontend-gui-tests.result == 'success' && needs.frontend-e2e-tests.result == 'success'
    #${{ secrets.EMAIL_FROM }}

    steps:
      - name: Send Email via SendGrid
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.sendgrid.net
          server_port: 587
          username: apikey
          password: ${{ secrets.SENDGRID_API_KEY }}
          from: "kephalosk <noreply@em9676.philippkraatz.com>"
          to: ${{ secrets.EMAIL_TO }}
          subject: "CI/CD develop - Success - philippkraatz.com - Notification"
          body: |
            Pipeline erfolgreich durchgelaufen für Repository **${{ github.repository }}**! 🎉

            Commit: ${{ github.event.head_commit.message }}
            Autor: ${{ github.event.head_commit.author.name }}

            🎯 Repository: [${{ github.repository }}](https://github.com/${{ github.repository }})
            🚀 Action Logs: [Hier ansehen](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
