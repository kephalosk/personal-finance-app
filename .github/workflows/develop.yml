name: version, test, build, push and scan

on:
  push:
    branches: 
      - 'develop'

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set Build Tag
        id: build_tag
        run: |
          COMMIT_DATE=$(git show -s --format=%ct $GITHUB_SHA)
          DATE_TAG=$(date -d "@$COMMIT_DATE" +%Y%m%d_%H%M%S)
          SHORT_SHA=${GITHUB_SHA:0:7}
          BUILD_TAG="${DATE_TAG}_${SHORT_SHA}_$(date +%Y%m%d_%H%M%S)"
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV

      - name: Set Version Tag
        id: version_tag
        run: |
          VERSION_TAG=$(jq -r '(.version | split(".") | del(.[2]) | join("."))' frontend/package.json)
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: Save Package Version
        run: |
          echo "${{ env.VERSION_TAG }}.${{ env.BUILD_TAG }}" > PACKAGE_VERSION
        shell: bash

      - name: Upload Package Version as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: PACKAGE_VERSION
          path: PACKAGE_VERSION
          retention-days: 7
          
  unit-tests:
    runs-on: ubuntu-latest

    needs: versioning

    steps:
      - name: Checkout master
        uses: actions/checkout@main

      - name: Install Dependencies
        run: |
         cd frontend
         npm install

      - name: Run Unit Tests
        run: |
         cd frontend
         npm run test
  
  build:
    runs-on: ubuntu-latest

    needs: unit-tests

    steps:
      - name: Checkout master
        uses: actions/checkout@main
  
      - name: Download PACKAGE_VERSION Artifact
        uses: actions/download-artifact@v3
        with:
          name: PACKAGE_VERSION
          path: .
  
      - name: Read PACKAGE_VERSION
        id: read_package_version
        run: |
          PACKAGE_VERSION=$(cat PACKAGE_VERSION)
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
        
      - name: Build container image
        run: docker build -t registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION }} -f deployment/frontend.Dockerfile .
  
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200
        
      - name: Push image to DigitalOcean Container Registry
        run: docker push registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION }}

      - name: Set CURRENT_IAT_SERVICE_VERSION in GitHub Repository Variables
        run: |
          curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.VARIABLE_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d '{"name": "CURRENT_IAT_SERVICE_VERSION", "value": "${{ env.PACKAGE_VERSION }}"}' \
            https://api.github.com/repos/${{ github.repository }}/actions/variables/CURRENT_IAT_SERVICE_VERSION

  scan:
    runs-on: ubuntu-latest

    needs: build

    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200
        
      - name: Download PACKAGE_VERSION Artifact
        uses: actions/download-artifact@v3
        with:
          name: PACKAGE_VERSION
          path: .
  
      - name: Read PACKAGE_VERSION
        id: read_package_version
        run: |
          PACKAGE_VERSION=$(cat PACKAGE_VERSION)
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
        
      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION }}

      - name: Authenticate GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
      - name: Set up Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -

      - name: Set TRIVY_DBREPO to avoid rate limiting
        run: echo "TRIVY_DBREPO=ghcr.io/aquasecurity/trivy-db" >> $GITHUB_ENV

      - name: Scan Docker Image
        run: ./bin/trivy image --exit-code 1 --severity HIGH,CRITICAL registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION }}

  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    needs: scan

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: |
         cd frontend
         npm ci

      - name: Install Playwright Browsers
        run: |
         cd frontend
         npx playwright install --with-deps

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION Artifact
        uses: actions/download-artifact@v3
        with:
          name: PACKAGE_VERSION
          path: .
  
      - name: Read PACKAGE_VERSION
        id: read_package_version
        run: |
          PACKAGE_VERSION=$(cat PACKAGE_VERSION)
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION }}

      - name: Run image from registry
        run: docker run -d -p 5173:80 registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION }}

      - name: Run Playwright tests
        run: |
         cd frontend
         npx playwright test ui-tests/e2e-tests

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/ui-tests/e2e-tests
          retention-days: 30

  gui-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    needs: scan

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright Browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION Artifact
        uses: actions/download-artifact@v3
        with:
          name: PACKAGE_VERSION
          path: .

      - name: Read PACKAGE_VERSION
        id: read_package_version
        run: |
          PACKAGE_VERSION=$(cat PACKAGE_VERSION)
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION }}

      - name: Run image from registry
        run: docker run -d -p 5173:80 registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION }}

      - name: Run Playwright tests
        run: |
          cd frontend
          npx playwright test ui-tests/gui-tests

      - name: Create Artifact for Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-integration
          path: frontend/ui-tests/gui-tests
          retention-days: 30

  create-new-vrts:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    needs: gui-tests
    if: failure()

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright Browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 1200

      - name: Download PACKAGE_VERSION Artifact
        uses: actions/download-artifact@v3
        with:
          name: PACKAGE_VERSION
          path: .

      - name: Read PACKAGE_VERSION
        id: read_package_version
        run: |
          PACKAGE_VERSION=$(cat PACKAGE_VERSION)
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

      - name: Pull image from registry
        run: docker pull registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION }}

      - name: Run image from registry
        run: docker run -d -p 5173:80 registry.digitalocean.com/kephalosk/personal-finance-app:${{ env.PACKAGE_VERSION }}

      - name: Run Playwright tests
        run: |
          cd frontend
          npx playwright test ui-tests/gui-tests --update-snapshots

      - name: Create Artifact for new vrt screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: new-vrts
          path: frontend/ui-tests/gui-tests
          retention-days: 30
